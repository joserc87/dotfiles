#!/usr/bin/python3

import os
import sys
import datetime
import re
from tasklib import TaskWarrior


def get_tw_project_names():
    tw = TaskWarrior("~/.task")
    tasks = tw.tasks.pending()
    projects = list({t["project"] for t in tasks if t["project"]})
    return projects


def get_all_parent_project_names(project):
    if project:
        parts = project.split(".")
        return [project, *get_all_parent_project_names(".".join(parts[:-1]))]
    return [project]


def fill_missing_parent_project_names(project_names):
    names = []
    for p in project_names:
        names.extend(get_all_parent_project_names(p))
    return set(names)


def today():
    date = datetime.date.today()
    return date.strftime("%d - %A")


def today_full():
    date = datetime.date.today()
    return date.strftime("%Y-%m-%d")


def tomorrow_full():
    date = datetime.date.today() + datetime.timedelta(days=1)
    return date.strftime("%Y-%m-%d")


def get_project_header(project, before_date):
    levels = len([dot for dot in project if dot == "."])

    hashtags = "#" * (levels + 3)
    only_parent_tasks = f"project.not:{project}." if levels == 0 else ""
    return f"{hashtags} {project} | -COMPLETED -WAITING project:{project} {only_parent_tasks} entry.before:{before_date} | project:{project}"


def render_template():
    template = """% {date}

# {date}

## Projects:

{projects}

## Done | end:{full_date}

## Notes

"""

    ## Todo | -COMPLETED -WAITING project.not:personal entry.before:{full_date} | project:TOOL
    project_names = get_tw_project_names()
    project_names = fill_missing_parent_project_names(project_names)
    project_names = sorted(project_names)
    tomorrow = tomorrow_full()
    projects = [get_project_header(project, tomorrow) for project in project_names if project]
    projects = "\n\n".join(projects)
    content = template.format(
        date=today(),
        full_date=today_full(),
        projects=projects,
    )
    return content


print(render_template())
