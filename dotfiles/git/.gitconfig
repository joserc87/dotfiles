[core]
	excludesfile = ~/.gitignore_global
	autocrlf = input
	pager = less -F -X
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 
[mergetool "sourcetree"]
	cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
# Data moved to .gitconfig.email to .gitignore it
[include]
	path = .gitconfig.email
# [user]
# 	name = Jose Ramon Cano
# 	email = joserc87@gmail.com
[filter "lfs"]
	clean = git-lfs clean %f
	smudge = git-lfs smudge %f
	required = true
[diff]
	tool = vimdiff
[alias]
	lg = !"git lg1"
	lgs = !"git lg1-specific"
	lg1 = !"git lg1-specific --all"
	lg2 = !"git lg2-specific --all"
	lg3 = !"git lg3-specific --all"

	lg1-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)'
	lg2-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)'
	lg3-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset) %C(bold cyan)(committed: %cD)%C(reset) %C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset)%n''          %C(dim white)- %an <%ae> %C(reset) %C(dim white)(committer: %cn <%ce>)%C(reset)'
	oneline-with-dates = log --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) %C(bold cyan)%as%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)'
	# Pretty prints the log
	# Idea taken from: https://gist.github.com/mikecharles/e808c77ddcc5ff239fe2696c61ffe1f1
	# tree = "!f() { git log $@ --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit ; }; f"
	tree = "!f() { git log $@ --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %<(50,trunc)%s %Cgreen(%cr) %C(reset)' --abbrev-commit ; }; f"
	stash-unapply = !git stash show -p | git apply -R
	# Just because I get tired of writing the same commands over and over and over and over again
	s = !"git status"
	d = !"git diff"
	ds = !"git diff --staged"
	change-commits = "!f() { VAR=$1; OLD=$2; NEW=$3; shift 3; git filter-branch --env-filter \"if [[ \\\"$`echo $VAR`\\\" = '$OLD' ]]; then export $VAR='$NEW'; fi\" $@; }; f "
[push]
	default = simple
[web]
	browser = firefox
[pull]
	rebase = true
[pager]
    #log = gitmoji-log | less --tabs=4 -rFX
[init]
	defaultBranch = main
